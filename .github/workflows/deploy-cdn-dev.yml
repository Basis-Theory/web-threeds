name: Deploy Dev

on:
  push:
    branches: [master]

jobs:
  build-deploy-dev:
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
      actions: read
    strategy:
      matrix:
        node: ['20.x']
        os: [ubuntu-latest]
    env:
      CI: 1
      HUSKY: 0 # disables husky hooks
      NPM_TOKEN: ${{ secrets.NPM_RELEASE_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SEMANTIC_RELEASE_PAT }}

      - name: Configure AWS Actions Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::914054469264:role/github-actions-admin-dev
          aws-region: us-east-2

      - name: Configure AWS Terraform Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::914054469264:role/terraform-admin
          aws-region: us-east-2
          role-chaining: true

      - name: Start Deploy Message
        uses: Basis-Theory/github-actions/deploy-slack-action@master
        with:
          slack-api-token: ${{ secrets.SLACK_DUCKBOT_API_KEY }}
          channel: ${{ vars.SLACK_DUCKBOT_PRODUCT_DEPLOY_CHANNEL }}

      - name: Use Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install deps (with cache)
        uses: bahmutov/npm-install@v1
        with:
          install-command: yarn --frozen-lockfile --no-progress --ignore-scripts

      - name: Build
        run: make build
        env:
          SKIP_INSTALL: 1 # install with cache was done already

      - name: Deploy CDN Bundle to Dev
        run: make upload-bundle
        env:
          ENVIRONMENT: dev
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_PAT }}

      - name: Slack Deploy / Release Alert
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: ${{ secrets.SLACK_RELEASE_CHANNEL_ID }}
          fields: 'repo,commit,message,workflow,job'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Stop Deploy Message
        if: always()
        uses: Basis-Theory/github-actions/deploy-slack-action@master
        with:
          slack-api-token: ${{ secrets.SLACK_DUCKBOT_API_KEY }}
          channel: ${{ vars.SLACK_DUCKBOT_PRODUCT_DEPLOY_CHANNEL }}
          status: 'done'

  tag-and-release:
    runs-on: ubuntu-latest
    needs:
      - build-deploy-dev
    strategy:
      matrix:
        node: ['20.x']
    steps:
    - name: Version and Tag
      id: bump_version
      uses: mathieudutour/github-tag-action@v5.2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate Release Notes
      id: release_notes
      uses: actions/github-script@v6
      env:
        NEW_RELEASE_TAG: ${{ steps.bump_version.outputs.new_tag }}
      with:
        result-encoding: string
        script: |
          const { NEW_RELEASE_TAG } = process.env;
          const latestRelease = await github.rest.repos.getLatestRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          const releaseNotes = await github.rest.repos.generateReleaseNotes({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: NEW_RELEASE_TAG,
            previous_tag_name: latestRelease.data.tag_name,
          });
          return releaseNotes.data.body;

    - name: Create Pre-Release
      uses: softprops/action-gh-release@v1
      with:
        prerelease: true
        generate_release_notes: false
        body: ${{ steps.release_notes.outputs.result }}
        tag_name: ${{ steps.bump_version.outputs.new_tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
